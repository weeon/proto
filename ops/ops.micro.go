// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: ops/ops.proto

/*
Package ops is a generated protocol buffer package.

It is generated from these files:
	ops/ops.proto

It has these top-level messages:
	PingMessage
	PongMessage
	DeployRequest
	DeployResponse
*/
package ops

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for OpsSrv service

type OpsSrvService interface {
	Ping(ctx context.Context, in *PingMessage, opts ...client.CallOption) (*PongMessage, error)
	Deploy(ctx context.Context, in *DeployRequest, opts ...client.CallOption) (*DeployResponse, error)
}

type opsSrvService struct {
	c    client.Client
	name string
}

func NewOpsSrvService(name string, c client.Client) OpsSrvService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "ops"
	}
	return &opsSrvService{
		c:    c,
		name: name,
	}
}

func (c *opsSrvService) Ping(ctx context.Context, in *PingMessage, opts ...client.CallOption) (*PongMessage, error) {
	req := c.c.NewRequest(c.name, "OpsSrv.Ping", in)
	out := new(PongMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsSrvService) Deploy(ctx context.Context, in *DeployRequest, opts ...client.CallOption) (*DeployResponse, error) {
	req := c.c.NewRequest(c.name, "OpsSrv.Deploy", in)
	out := new(DeployResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpsSrv service

type OpsSrvHandler interface {
	Ping(context.Context, *PingMessage, *PongMessage) error
	Deploy(context.Context, *DeployRequest, *DeployResponse) error
}

func RegisterOpsSrvHandler(s server.Server, hdlr OpsSrvHandler, opts ...server.HandlerOption) error {
	type opsSrv interface {
		Ping(ctx context.Context, in *PingMessage, out *PongMessage) error
		Deploy(ctx context.Context, in *DeployRequest, out *DeployResponse) error
	}
	type OpsSrv struct {
		opsSrv
	}
	h := &opsSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&OpsSrv{h}, opts...))
}

type opsSrvHandler struct {
	OpsSrvHandler
}

func (h *opsSrvHandler) Ping(ctx context.Context, in *PingMessage, out *PongMessage) error {
	return h.OpsSrvHandler.Ping(ctx, in, out)
}

func (h *opsSrvHandler) Deploy(ctx context.Context, in *DeployRequest, out *DeployResponse) error {
	return h.OpsSrvHandler.Deploy(ctx, in, out)
}
